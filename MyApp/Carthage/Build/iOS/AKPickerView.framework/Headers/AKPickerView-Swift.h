// Generated by Apple Swift version 2.1 (swiftlang-700.1.101.6 clang-700.1.76)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if defined(__has_include) && __has_include(<uchar.h>)
# include <uchar.h>
#elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
#endif

typedef struct _NSZone NSZone;

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted) 
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
#endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
#if defined(__has_feature) && __has_feature(modules)
@import UIKit;
@import CoreGraphics;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
@protocol AKPickerViewDelegate;
@class UIFont;
@class UIColor;
@class NSCoder;
@class UICollectionView;
@class NSIndexPath;
@class UICollectionViewCell;
@class UICollectionViewLayout;
@class UIScrollView;
@protocol AKPickerViewDataSource;


/// Horizontal picker view. This is just a subclass of UIView, contains a UICollectionView.
SWIFT_CLASS("_TtC12AKPickerView12AKPickerView")
@interface AKPickerView : UIView <UIScrollViewDelegate, UICollectionViewDelegateFlowLayout, UICollectionViewDelegate, UICollectionViewDataSource>

/// Readwrite. Data source of picker view.
@property (nonatomic, weak) id <AKPickerViewDataSource> __nullable dataSource;

/// Readwrite. Delegate of picker view.
@property (nonatomic, weak) id <AKPickerViewDelegate> __nullable delegate;

/// Readwrite. A font which used in NOT selected cells.
@property (nonatomic, strong) UIFont * __nonnull font;

/// Readwrite. A font which used in selected cells.
@property (nonatomic, strong) UIFont * __nonnull highlightedFont;

/// Readwrite. A color of the text on NOT selected cells.
@property (nonatomic, strong) UIColor * __nonnull textColor;

/// Readwrite. A color of the text on selected cells.
@property (nonatomic, strong) UIColor * __nonnull highlightedTextColor;

/// Readwrite. A float value which indicates the spacing between cells.
@property (nonatomic) CGFloat interitemSpacing;

/// Readwrite. A float value which determines the perspective representation which used when using AKPickerViewStyle.Wheel style.
@property (nonatomic) CGFloat viewDepth;

/// Readonly. Index of currently selected item.
@property (nonatomic, readonly) NSInteger selectedItem;

/// Readonly. The point at which the origin of the content view is offset from the origin of the picker view.
@property (nonatomic, readonly) CGPoint contentOffset;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (null_unspecified instancetype)initWithCoder:(NSCoder * __nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)layoutSubviews;
- (CGSize)intrinsicContentSize;

/// <code>Reload the picker view's contents and styles. Call this method always after any property is changed.
/// 
/// </code>
- (void)reloadData;

/// <code>Move to the cell whose index is given one without selection change.
/// 
/// :param: item     An integer value which indicates the index of cell.
/// :param: animated True if the scrolling should be animated, false if it should be immediate.
/// 
/// </code>
- (void)scrollToItem:(NSInteger)item animated:(BOOL)animated;

/// <code>Select a cell whose index is given one and move to it.
/// 
/// :param: item     An integer value which indicates the index of cell.
/// :param: animated True if the scrolling should be animated, false if it should be immediate.
/// 
/// </code>
- (void)selectItem:(NSInteger)item animated:(BOOL)animated;
- (NSInteger)numberOfSectionsInCollectionView:(UICollectionView * __nonnull)collectionView;
- (NSInteger)collectionView:(UICollectionView * __nonnull)collectionView numberOfItemsInSection:(NSInteger)section;
- (UICollectionViewCell * __nonnull)collectionView:(UICollectionView * __nonnull)collectionView cellForItemAtIndexPath:(NSIndexPath * __nonnull)indexPath;
- (CGSize)collectionView:(UICollectionView * __nonnull)collectionView layout:(UICollectionViewLayout * __nonnull)collectionViewLayout sizeForItemAtIndexPath:(NSIndexPath * __nonnull)indexPath;
- (CGFloat)collectionView:(UICollectionView * __nonnull)collectionView layout:(UICollectionViewLayout * __nonnull)collectionViewLayout minimumInteritemSpacingForSectionAtIndex:(NSInteger)section;
- (CGFloat)collectionView:(UICollectionView * __nonnull)collectionView layout:(UICollectionViewLayout * __nonnull)collectionViewLayout minimumLineSpacingForSectionAtIndex:(NSInteger)section;
- (UIEdgeInsets)collectionView:(UICollectionView * __nonnull)collectionView layout:(UICollectionViewLayout * __nonnull)collectionViewLayout insetForSectionAtIndex:(NSInteger)section;
- (void)collectionView:(UICollectionView * __nonnull)collectionView didSelectItemAtIndexPath:(NSIndexPath * __nonnull)indexPath;
- (void)scrollViewDidEndDecelerating:(UIScrollView * __nonnull)scrollView;
- (void)scrollViewDidEndDragging:(UIScrollView * __nonnull)scrollView willDecelerate:(BOOL)decelerate;
- (void)scrollViewDidScroll:(UIScrollView * __nonnull)scrollView;
@end

@class UIImage;


/// Protocols to specify the number and type of contents.
SWIFT_PROTOCOL("_TtP12AKPickerView22AKPickerViewDataSource_")
@protocol AKPickerViewDataSource
- (NSInteger)numberOfItemsInPickerView:(AKPickerView * __nonnull)pickerView;
@optional
- (NSString * __nonnull)pickerView:(AKPickerView * __nonnull)pickerView titleForItem:(NSInteger)item;
- (UIImage * __nonnull)pickerView:(AKPickerView * __nonnull)pickerView imageForItem:(NSInteger)item;
@end

@class UILabel;


/// Protocols to specify the attitude when user selected an item, and customize the appearance of labels.
SWIFT_PROTOCOL("_TtP12AKPickerView20AKPickerViewDelegate_")
@protocol AKPickerViewDelegate <UIScrollViewDelegate>
@optional
- (void)pickerView:(AKPickerView * __nonnull)pickerView didSelectItem:(NSInteger)item;
- (CGSize)pickerView:(AKPickerView * __nonnull)pickerView marginForItem:(NSInteger)item;
- (void)pickerView:(AKPickerView * __nonnull)pickerView configureLabel:(UILabel * __nonnull)label forItem:(NSInteger)item;
@end

#pragma clang diagnostic pop
